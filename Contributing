# Contributing to QuestLog

Thank you for your interest in contributing to QuestLog! This document provides guidelines and information about contributing to this React + TypeScript + Vite project.

## Table of Contents

1. [Code of Conduct](#code-of-conduct)
2. [Getting Started](#getting-started)
3. [Development Workflow](#development-workflow)
4. [Pull Request Process](#pull-request-process)
5. [Coding Standards](#coding-standards)
6. [Testing Guidelines](#testing-guidelines)
7. [Documentation](#documentation)
8. [Commit Message Guidelines](#commit-message-guidelines)

## Code of Conduct

This project adheres to a Code of Conduct that all contributors are expected to follow. By participating, you are expected to uphold this code. Please report unacceptable behavior to the project maintainers.

- Be respectful and inclusive
- Be patient and welcoming
- Be considerate
- Be collaborative
- Be careful with your words and actions

## Getting Started

### Prerequisites

- Node.js (v16 or newer)
- npm or yarn
- Git

### Setup for Development

1. Fork the repository on GitHub
2. Clone your fork locally:
   ```bash
   git clone https://github.com/YOUR-USERNAME/QuestLog-ToDo-List.git
   cd QuestLog-ToDo-List
   ```

3. Add the original repository as an upstream remote:
   ```bash
   git remote add upstream https://github.com/Gelegrimbor/QuestLog-ToDo-List.git
   ```

4. Install dependencies:
   ```bash
   npm install
   # or
   yarn
   ```

5. Create a new branch for your feature or bugfix:
   ```bash
   git checkout -b feature/your-feature-name
   ```

## Development Workflow

1. Make your changes in your feature branch
2. Run the development server to see your changes:
   ```bash
   npm run dev
   # or
   yarn dev
   ```

3. Make sure your code passes linting:
   ```bash
   npm run lint
   # or
   yarn lint
   ```

4. Write tests for your changes and ensure all tests pass:
   ```bash
   npm run test
   # or
   yarn test
   ```

5. Keep your branch updated with the main branch:
   ```bash
   git fetch upstream
   git rebase upstream/main
   ```

## Pull Request Process

1. Update your fork to the latest upstream version
2. Ensure your branch is up to date with the main branch
3. Run tests and linting to ensure your code is clean
4. Push your changes to your fork
5. Open a pull request against the main repository
6. Fill in the PR template with all required information
7. Wait for code review and address any feedback

### PR Requirements

- PR title should be descriptive and follow the [commit message format](#commit-message-guidelines)
- PRs should include tests for new functionality
- PRs should include updates to documentation if necessary
- PRs should only include changes relevant to the issue they address

## Coding Standards

### TypeScript

- Follow the TypeScript best practices
- Use strict type checking
- Avoid using `any` type when possible
- Use interfaces for object types
- Use proper type annotations for function parameters and return types

### React

- Use functional components with hooks
- Keep components small and focused on a single responsibility
- Use proper prop types with TypeScript interfaces
- Follow React best practices for performance optimization

### Styling

- Use CSS/SCSS modules for component-specific styles
- Follow BEM naming convention for CSS classes
- Keep styles close to their components

### File Structure

- Organize files by feature or component
- Use consistent file naming conventions
- Keep related files together

## Testing Guidelines

- Write tests for all new features
- Maintain existing tests when modifying code
- Aim for good test coverage
- Use meaningful test descriptions

### Test Structure

- Arrange: Set up test data and conditions
- Act: Perform the action being tested
- Assert: Verify the expected outcome

## Documentation

Good documentation is essential for the project's long-term success:

- Document all components with clear descriptions of their purpose and props
- Update the README.md file with new features or changes
- Add JSDoc comments to functions and classes
- Create or update user documentation as needed

## Commit Message Guidelines

We follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

### Types

- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation changes
- `style`: Changes that do not affect the code's meaning (formatting, etc.)
- `refactor`: Code changes that neither fix a bug nor add a feature
- `perf`: Performance improvements
- `test`: Adding or correcting tests
- `chore`: Changes to the build process or auxiliary tools

### Example

```
feat(quest): add experience points for completing quests

- Added XP calculation based on quest difficulty
- Updated user profile to show accumulated XP
- Added level progression system

Closes #123
```

## Thank You

Your contributions are what make open source projects great! Thank you for taking the time to contribute to QuestLog.
